using FluentAI.Abstractions.Models;

namespace FluentAI.Abstractions.Middleware;

/// <summary>
/// Middleware interface for processing chat requests and responses in a pipeline.
/// </summary>
public interface IChatMiddleware
{
    /// <summary>
    /// Processes a chat request before it's sent to the model.
    /// </summary>
    /// <param name="context">The middleware context containing the request.</param>
    /// <param name="next">Delegate to invoke the next middleware in the pipeline.</param>
    /// <returns>The chat response after processing.</returns>
    Task<ChatResponse> InvokeAsync(ChatMiddlewareContext context, ChatMiddlewareDelegate next);
}

/// <summary>
/// Delegate representing the next middleware in the pipeline.
/// </summary>
/// <param name="context">The middleware context.</param>
/// <returns>The chat response.</returns>
public delegate Task<ChatResponse> ChatMiddlewareDelegate(ChatMiddlewareContext context);

/// <summary>
/// Context passed through the middleware pipeline.
/// </summary>
public class ChatMiddlewareContext
{
    /// <summary>
    /// The chat messages being processed.
    /// </summary>
    public required IEnumerable<ChatMessage> Messages { get; set; }

    /// <summary>
    /// Request options.
    /// </summary>
    public ChatRequestOptions? Options { get; set; }

    /// <summary>
    /// Cancellation token.
    /// </summary>
    public CancellationToken CancellationToken { get; set; }

    /// <summary>
    /// Custom properties that can be set by middleware.
    /// </summary>
    public Dictionary<string, object> Properties { get; } = new();

    /// <summary>
    /// The chat model being used.
    /// </summary>
    public IChatModel? ChatModel { get; set; }

    /// <summary>
    /// Whether the request has been handled by middleware.
    /// </summary>
    public bool IsHandled { get; set; }

    /// <summary>
    /// The response if already generated by middleware.
    /// </summary>
    public ChatResponse? Response { get; set; }
}

/// <summary>
/// Builder for configuring the middleware pipeline.
/// </summary>
public interface IChatMiddlewarePipeline
{
    /// <summary>
    /// Adds middleware to the pipeline.
    /// </summary>
    /// <param name="middleware">Middleware instance to add.</param>
    /// <returns>The pipeline builder for method chaining.</returns>
    IChatMiddlewarePipeline Use(IChatMiddleware middleware);

    /// <summary>
    /// Adds middleware using a factory function.
    /// </summary>
    /// <param name="middlewareFactory">Factory function to create middleware.</param>
    /// <returns>The pipeline builder for method chaining.</returns>
    IChatMiddlewarePipeline Use(Func<IServiceProvider, IChatMiddleware> middlewareFactory);

    /// <summary>
    /// Adds middleware using an inline delegate.
    /// </summary>
    /// <param name="middleware">Middleware delegate.</param>
    /// <returns>The pipeline builder for method chaining.</returns>
    IChatMiddlewarePipeline Use(Func<ChatMiddlewareContext, ChatMiddlewareDelegate, Task<ChatResponse>> middleware);

    /// <summary>
    /// Builds the middleware pipeline.
    /// </summary>
    /// <returns>The final middleware delegate.</returns>
    ChatMiddlewareDelegate Build();
}

/// <summary>
/// Base class for implementing chat middleware.
/// </summary>
public abstract class ChatMiddlewareBase : IChatMiddleware
{
    /// <inheritdoc/>
    public abstract Task<ChatResponse> InvokeAsync(ChatMiddlewareContext context, ChatMiddlewareDelegate next);

    /// <summary>
    /// Executes the next middleware in the pipeline.
    /// </summary>
    /// <param name="context">The middleware context.</param>
    /// <param name="next">The next middleware delegate.</param>
    /// <returns>The chat response.</returns>
    protected Task<ChatResponse> NextAsync(ChatMiddlewareContext context, ChatMiddlewareDelegate next)
    {
        return next(context);
    }
}

/// <summary>
/// Chat model wrapper that supports middleware pipeline.
/// </summary>
public interface IMiddlewareEnabledChatModel : IChatModel
{
    /// <summary>
    /// Gets the middleware pipeline.
    /// </summary>
    IChatMiddlewarePipeline Pipeline { get; }

    /// <summary>
    /// Executes a request through the middleware pipeline.
    /// </summary>
    /// <param name="messages">Messages to process.</param>
    /// <param name="options">Request options.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>Chat response after middleware processing.</returns>
    Task<ChatResponse> ExecuteThroughPipelineAsync(
        IEnumerable<ChatMessage> messages,
        ChatRequestOptions? options = null,
        CancellationToken cancellationToken = default);
}
